"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[199],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return m}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var u=r.createContext({}),p=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},s=function(e){var t=p(e.components);return r.createElement(u.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,u=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),d=p(n),m=o,h=d["".concat(u,".").concat(m)]||d[m]||c[m]||i;return n?r.createElement(h,a(a({ref:t},s),{},{components:n})):r.createElement(h,a({ref:t},s))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=d;var l={};for(var u in t)hasOwnProperty.call(t,u)&&(l[u]=t[u]);l.originalType=e,l.mdxType="string"==typeof e?e:o,a[1]=l;for(var p=2;p<i;p++)a[p]=n[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5842:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return u},metadata:function(){return p},toc:function(){return s},default:function(){return d}});var r=n(3117),o=n(102),i=(n(7294),n(3905)),a=["components"],l={},u="Colorspace Related Distortion",p={unversionedId:"feature/photometric-distortion/color",id:"feature/photometric-distortion/color",title:"Colorspace Related Distortion",description:"mean_shift",source:"@site/docs/feature/photometric-distortion/color.md",sourceDirName:"feature/photometric-distortion",slug:"/feature/photometric-distortion/color",permalink:"/feature/photometric-distortion/color",editUrl:"https://github.com/vkit-x/vkit/edit/master/website/docs/feature/photometric-distortion/color.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Usage",permalink:"/feature/photometric-distortion/example"},next:{title:"Noise Related Distortion",permalink:"/feature/photometric-distortion/noise"}},s=[{value:"<code>mean_shift</code>",id:"mean_shift",children:[],level:2},{value:"<code>std_shift</code>",id:"std_shift",children:[],level:2},{value:"<code>channel_permutate</code>",id:"channel_permutate",children:[],level:2},{value:"<code>hue_shift</code>",id:"hue_shift",children:[],level:2},{value:"<code>saturation_shift</code>",id:"saturation_shift",children:[],level:2}],c={toc:s};function d(e){var t=e.components,n=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"colorspace-related-distortion"},"Colorspace Related Distortion"),(0,i.kt)("h2",{id:"mean_shift"},(0,i.kt)("inlineCode",{parentName:"h2"},"mean_shift")),(0,i.kt)("p",null,"Description: Shift the mean of each channel, aka the brightness"),(0,i.kt)("p",null,"Effect:"),(0,i.kt)("div",{align:"center"},(0,i.kt)("video",{width:"75%",height:"75%",autoplay:"true",muted:"true",playsinline:"true",loop:"true",controls:"ture"},(0,i.kt)("source",{src:"/pho/mean_shift.mp4",type:"video/mp4"}))),(0,i.kt)("p",null,"Import statement:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"from vkit.augmentation.photometric_distortion import (\n    MeanShiftConfig,\n    mean_shift,\n)\n")),(0,i.kt)("p",null,"Configuration type:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"@attr.define\nclass MeanShiftConfig:\n    delta: int\n")),(0,i.kt)("p",null,"Parameters:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"delta"),": The value for addition. Overflow/underflow issue of ",(0,i.kt)("inlineCode",{parentName:"li"},"uint8")," is resolved through clipping")),(0,i.kt)("h2",{id:"std_shift"},(0,i.kt)("inlineCode",{parentName:"h2"},"std_shift")),(0,i.kt)("p",null,"Description: Shift (adjust) the standard deviation of each channel, aka the contrast"),(0,i.kt)("p",null,"Effect:"),(0,i.kt)("div",{align:"center"},(0,i.kt)("video",{width:"75%",height:"75%",autoplay:"true",muted:"true",playsinline:"true",loop:"true",controls:"ture"},(0,i.kt)("source",{src:"/pho/std_shift.mp4",type:"video/mp4"}))),(0,i.kt)("p",null,"Import statement:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"from vkit.augmentation.photometric_distortion import (\n    StdShiftConfig,\n    std_shift,\n)\n")),(0,i.kt)("p",null,"Configuration type:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"@attr.define\nclass StdShiftConfig:\n    scale: float\n")),(0,i.kt)("p",null,"Parameters:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"scale"),": The value for multiplication. Overflow/underflow issue of ",(0,i.kt)("inlineCode",{parentName:"li"},"uint8")," is resolved through clipping")),(0,i.kt)("h2",{id:"channel_permutate"},(0,i.kt)("inlineCode",{parentName:"h2"},"channel_permutate")),(0,i.kt)("p",null,"Description: Permutate the order of channels"),(0,i.kt)("p",null,"Effect:"),(0,i.kt)("div",{align:"center"},(0,i.kt)("video",{width:"75%",height:"75%",autoplay:"true",muted:"true",playsinline:"true",loop:"true",controls:"ture"},(0,i.kt)("source",{src:"/pho/channel_permutate.mp4",type:"video/mp4"}))),(0,i.kt)("p",null,"Import statement:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"from vkit.augmentation.photometric_distortion import (\n    ChannelPermutateConfig,\n    channel_permutate,\n)\n")),(0,i.kt)("p",null,"Configuration type:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"@attr.define\nclass ChannelPermutateConfig:\n    rnd_state: Any = None\n")),(0,i.kt)("p",null,"Parameters:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"rnd_state"),": Optional. If provided, should be the same type as ",(0,i.kt)("inlineCode",{parentName:"li"},"numpy.random.RandomState.get_state()"),". ",(0,i.kt)("inlineCode",{parentName:"li"},"rnd_state")," is used to initialize ",(0,i.kt)("inlineCode",{parentName:"li"},"numpy.random.RandomState")," to control the randomness")),(0,i.kt)("h2",{id:"hue_shift"},(0,i.kt)("inlineCode",{parentName:"h2"},"hue_shift")),(0,i.kt)("p",null,"Description: Shift the mean of hue channel. Note that the input ",(0,i.kt)("inlineCode",{parentName:"p"},"Image")," should have ",(0,i.kt)("inlineCode",{parentName:"p"},"HSV")," mode"),(0,i.kt)("p",null,"Effect:"),(0,i.kt)("div",{align:"center"},(0,i.kt)("video",{width:"75%",height:"75%",autoplay:"true",muted:"true",playsinline:"true",loop:"true",controls:"ture"},(0,i.kt)("source",{src:"/pho/hue_shift.mp4",type:"video/mp4"}))),(0,i.kt)("p",null,"Import statement:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"from vkit.augmentation.photometric_distortion import (\n    HueShiftConfig,\n    hue_shift,\n)\n")),(0,i.kt)("p",null,"Configuration type:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"@attr.define\nclass HueShiftConfig:\n    delta: int\n")),(0,i.kt)("p",null,"Parameters:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"delta"),": The value for hue addition. Overflow/underflow issue of ",(0,i.kt)("inlineCode",{parentName:"li"},"uint8")," is resolved through modulo operation")),(0,i.kt)("h2",{id:"saturation_shift"},(0,i.kt)("inlineCode",{parentName:"h2"},"saturation_shift")),(0,i.kt)("p",null,"Description: Shift the mean of saturation channel. Note that the input ",(0,i.kt)("inlineCode",{parentName:"p"},"Image")," should have ",(0,i.kt)("inlineCode",{parentName:"p"},"HSV")," mode"),(0,i.kt)("p",null,"Effect:"),(0,i.kt)("div",{align:"center"},(0,i.kt)("video",{width:"75%",height:"75%",autoplay:"true",muted:"true",playsinline:"true",loop:"true",controls:"ture"},(0,i.kt)("source",{src:"/pho/saturation_shift.mp4",type:"video/mp4"}))),(0,i.kt)("p",null,"Import statement:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"from vkit.augmentation.photometric_distortion import (\n    SaturationShiftConfig,\n    saturation_shift,\n)\n")),(0,i.kt)("p",null,"Configuration type:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"@attr.define\nclass SaturationShiftConfig:\n    delta: int\n")),(0,i.kt)("p",null,"Parameters:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"delta"),": The value for saturation addition. Overflow/underflow issue of ",(0,i.kt)("inlineCode",{parentName:"li"},"uint8")," is resolved through clipping")))}d.isMDXComponent=!0}}]);
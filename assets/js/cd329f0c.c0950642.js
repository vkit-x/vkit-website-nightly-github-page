"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[286],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return d}});var i=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=i.createContext({}),p=function(e){var t=i.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},s=function(e){var t=p(e.components);return i.createElement(c.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},u=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),u=p(n),d=r,g=u["".concat(c,".").concat(d)]||u[d]||m[d]||o;return n?i.createElement(g,a(a({ref:t},s),{},{components:n})):i.createElement(g,a({ref:t},s))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,a=new Array(o);a[0]=u;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:r,a[1]=l;for(var p=2;p<o;p++)a[p]=n[p];return i.createElement.apply(null,a)}return i.createElement.apply(null,n)}u.displayName="MDXCreateElement"},1102:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return c},metadata:function(){return p},toc:function(){return s},default:function(){return u}});var i=n(3117),r=n(102),o=(n(7294),n(3905)),a=["components"],l={},c="Interface",p={unversionedId:"feature/geometric-distortion/interface",id:"feature/geometric-distortion/interface",title:"Interface",description:"Import statement:",source:"@site/docs/feature/geometric-distortion/interface.md",sourceDirName:"feature/geometric-distortion",slug:"/feature/geometric-distortion/interface",permalink:"/feature/geometric-distortion/interface",editUrl:"https://github.com/vkit-x/vkit/edit/master/website/docs/feature/geometric-distortion/interface.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Overview",permalink:"/"},next:{title:"Usage",permalink:"/feature/geometric-distortion/example"}},s=[],m={toc:s};function u(e){var t=e.components,n=(0,r.Z)(e,a);return(0,o.kt)("wrapper",(0,i.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"interface"},"Interface"),(0,o.kt)("p",null,"Import statement:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from vkit.augmentation.geometric_distortion import (\n    # The interface class\n    GeometricDistortion,\n    # The return type of distort(...)\n    GeometricDistortionResult,\n)\n")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"GeometricDistortion.distort")," interface\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def distort(\n    self,\n    config_or_config_generator: Union[T_CONFIG,\n                                      Callable[[Tuple[int, int], np.random.RandomState],\n                                               T_CONFIG]],\n    image: Image,\n    image_mask: Optional[ImageMask] = None,\n    image_score_map: Optional[ImageScoreMap] = None,\n    point: Optional[Point] = None,\n    points: Optional[PointList] = None,\n    polygon: Optional[Polygon] = None,\n    polygons: Optional[Iterable[Polygon]] = None,\n    get_active_image_mask: bool = False,\n    get_config: bool = False,\n    get_state: bool = False,\n    rnd: Optional[np.random.RandomState] = None,\n) -> GeometricDistortionResult:\n    ...\n")),(0,o.kt)("p",null,"Parameters\uff1a"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"config_or_config_generator"),": A configuration instance, or a function accepting ",(0,o.kt)("inlineCode",{parentName:"li"},"(Tuple[int, int], np.random.RandomState)")," and returning a configuration instance. Each geometric distortion strategy should be associated  with a unique configuration type, e.g. ",(0,o.kt)("inlineCode",{parentName:"li"},"CameraCubicCurveConfig")," configuration type for  ",(0,o.kt)("inlineCode",{parentName:"li"},"camera_cubic_curve")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"image"),"\uff1aThe image to be distorted"),(0,o.kt)("li",{parentName:"ul"},"Parameters like ",(0,o.kt)("inlineCode",{parentName:"li"},"image_mask"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"image_score_map"),"  are optional. If provided, the same distortion operation will be applied to those objects"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"get_active_image_mask"),"\uff1aIf set to ",(0,o.kt)("inlineCode",{parentName:"li"},"True"),", the result should contain an  ",(0,o.kt)("inlineCode",{parentName:"li"},"active_image_mask")," attribute, assigned by a ",(0,o.kt)("inlineCode",{parentName:"li"},"ImageMask")," object to represent the region corresponding to the input region, so-called the active region"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"get_config"),"\uff1aIf set to ",(0,o.kt)("inlineCode",{parentName:"li"},"True"),", the result should contain a  ",(0,o.kt)("inlineCode",{parentName:"li"},"config")," attribute, that is, the configuration instance guided the distortion"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"get_state"),"\uff1aIf set to ",(0,o.kt)("inlineCode",{parentName:"li"},"True"),", the result should contain a  ",(0,o.kt)("inlineCode",{parentName:"li"},"state")," attribute, that is, the state instance used in distortion"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"rnd"),"\uff1a",(0,o.kt)("inlineCode",{parentName:"li"},"numpy.random.RandomState")," instance. If provided, could be used for generating configuration instance or called by any operations requiring randomness")),(0,o.kt)("p",null,"The return type of  ",(0,o.kt)("inlineCode",{parentName:"p"},"GeometricDistortion.distort"),"\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"@attr.define\nclass GeometricDistortionResult:\n    image: Image\n    image_mask: Optional[ImageMask] = None\n    image_score_map: Optional[ImageScoreMap] = None\n    active_image_mask: Optional[ImageMask] = None\n    point: Optional[Point] = None\n    points: Optional[PointList] = None\n    polygon: Optional[Polygon] = None\n    polygons: Optional[Sequence[Polygon]] = None\n    config: Optional[Any] = None\n    state: Optional[Any] = None\n")),(0,o.kt)("p",null,"Parameters: match the parameters of ",(0,o.kt)("inlineCode",{parentName:"p"},"GeometricDistortion.distort")))}u.isMDXComponent=!0}}]);
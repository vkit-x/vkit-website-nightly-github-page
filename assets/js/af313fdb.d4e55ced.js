"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[945],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return c}});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var m=a.createContext({}),p=function(e){var t=a.useContext(m),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(m.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},k=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,l=e.originalType,m=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),k=p(n),c=i,u=k["".concat(m,".").concat(c)]||k[c]||s[c]||l;return n?a.createElement(u,r(r({ref:t},d),{},{components:n})):a.createElement(u,r({ref:t},d))}));function c(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var l=n.length,r=new Array(l);r[0]=k;var o={};for(var m in t)hasOwnProperty.call(t,m)&&(o[m]=t[m]);o.originalType=e,o.mdxType="string"==typeof e?e:i,r[1]=o;for(var p=2;p<l;p++)r[p]=n[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}k.displayName="MDXCreateElement"},5599:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return o},contentTitle:function(){return m},metadata:function(){return p},toc:function(){return d},default:function(){return k}});var a=n(3117),i=n(102),l=(n(7294),n(3905)),r=["components"],o={},m="Image Type",p={unversionedId:"utility/image",id:"utility/image",title:"Image Type",description:"ImageKind",source:"@site/docs/utility/image.md",sourceDirName:"utility",slug:"/utility/image",permalink:"/utility/image",editUrl:"https://github.com/vkit-x/vkit/edit/master/website/docs/utility/image.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Noise Related Distortion",permalink:"/feature/photometric-distortion/noise"},next:{title:"Labeled Data Type",permalink:"/utility/label"}},d=[{value:"ImageKind",id:"imagekind",children:[],level:2},{value:"Image",id:"image",children:[{value:"<code>ImageKind.from_file</code>",id:"imagekindfrom_file",children:[],level:3},{value:"<code>self.to_file</code>",id:"selfto_file",children:[],level:3},{value:"<code>ImageKind.from_pil_image</code>",id:"imagekindfrom_pil_image",children:[],level:3},{value:"<code>self.to_pil_image</code>",id:"selfto_pil_image",children:[],level:3},{value:"<code>self.clone</code>",id:"selfclone",children:[],level:3},{value:"<code>self.to_grayscale_image</code>",id:"selfto_grayscale_image",children:[],level:3},{value:"<code>self.to_rgb_image</code>",id:"selfto_rgb_image",children:[],level:3},{value:"<code>self.to_rgba_image</code>",id:"selfto_rgba_image",children:[],level:3},{value:"<code>self.to_hsv_image</code>",id:"selfto_hsv_image",children:[],level:3},{value:"<code>self.to_gcn_image</code>",id:"selfto_gcn_image",children:[],level:3},{value:"<code>self.to_non_gcn_image</code>",id:"selfto_non_gcn_image",children:[],level:3},{value:"<code>self.to_resized_image</code>",id:"selfto_resized_image",children:[],level:3}],level:2}],s={toc:d};function k(e){var t=e.components,n=(0,i.Z)(e,r);return(0,l.kt)("wrapper",(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"image-type"},"Image Type"),(0,l.kt)("h2",{id:"imagekind"},"ImageKind"),(0,l.kt)("p",null,"Import statement:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"from vkit.image.type import ImageKind\n")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"ImageKind")," can be used to tag the image type for an ",(0,l.kt)("inlineCode",{parentName:"p"},"Image")," object\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"class ImageKind(Enum):\n    RGB = auto()\n    RGB_GCN = auto()\n    RGBA = auto()\n    HSV = auto()\n    HSV_GCN = auto()\n    GRAYSCALE = auto()\n    GRAYSCALE_GCN = auto()\n    NONE = auto()\n")),(0,l.kt)("p",null,"Explanations:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"*_GCN"),": represents the GCN (Global Contrast Normalization) resultant type from the corresponding image type"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"RGB"),": associates ",(0,l.kt)("inlineCode",{parentName:"li"},"mat.ndim = 3"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"mat.dtype = np.uint8")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"RGB_GCN"),": associates ",(0,l.kt)("inlineCode",{parentName:"li"},"mat.ndim = 3"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"mat.dtype = np.float32")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"RGBA"),": associates ",(0,l.kt)("inlineCode",{parentName:"li"},"mat.ndim = 4"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"mat.dtype = np.uint8")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"HSV"),": associates ",(0,l.kt)("inlineCode",{parentName:"li"},"mat.ndim = 3"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"mat.dtype = np.uint8")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"HSV_GCN"),": associates ",(0,l.kt)("inlineCode",{parentName:"li"},"mat.ndim = 3"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"mat.dtype = np.float32")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"GRAYSCALE"),": associates ",(0,l.kt)("inlineCode",{parentName:"li"},"mat.ndim = 2"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"mat.dtype = np.uint8")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"GRAYSCALE_GCN"),": associates ",(0,l.kt)("inlineCode",{parentName:"li"},"mat.ndim = 2"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"mat.dtype = np.float32")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"NONE"),": Only used while initialising ",(0,l.kt)("inlineCode",{parentName:"li"},"Image")," . If ",(0,l.kt)("inlineCode",{parentName:"li"},"kind")," was not explicitly passed into ",(0,l.kt)("inlineCode",{parentName:"li"},"Image")," constructor, vkit will infer the ",(0,l.kt)("inlineCode",{parentName:"li"},"kind")," from ",(0,l.kt)("inlineCode",{parentName:"li"},"ndim")," and ",(0,l.kt)("inlineCode",{parentName:"li"},"dtype")," of ",(0,l.kt)("inlineCode",{parentName:"li"},"mat"))),(0,l.kt)("h2",{id:"image"},"Image"),(0,l.kt)("p",null,"Import statement:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"from vkit.image.type import Image\n")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"Image")," is the image data encapsulation provided by vkit. It supports I/O, normalisation, scaling and other common image manipulations. ",(0,l.kt)("inlineCode",{parentName:"p"},"Image")," has the following fields:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"@attr.define\nclass Image:\n    mat: np.ndarray\n    kind: ImageKind = ImageKind.NONE\n")),(0,l.kt)("p",null,"Explanations:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"mat"),": a numpy array, its ",(0,l.kt)("inlineCode",{parentName:"li"},"ndim")," and ",(0,l.kt)("inlineCode",{parentName:"li"},"dtype")," will be associated to ",(0,l.kt)("inlineCode",{parentName:"li"},"kind"),". Refer to the above ",(0,l.kt)("inlineCode",{parentName:"li"},"ImageKind")," section for detail"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"kind"),": tags the corresponding ",(0,l.kt)("inlineCode",{parentName:"li"},"mat"))),(0,l.kt)("p",null,"Attributes of ",(0,l.kt)("inlineCode",{parentName:"p"},"Image"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"height"),": type ",(0,l.kt)("inlineCode",{parentName:"li"},"int")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"width"),": type ",(0,l.kt)("inlineCode",{parentName:"li"},"int")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"shape"),": (height, width), type ",(0,l.kt)("inlineCode",{parentName:"li"},"Tuple[int, int]")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"num_channels"),": number of channels, type ",(0,l.kt)("inlineCode",{parentName:"li"},"int"),". If the ",(0,l.kt)("inlineCode",{parentName:"li"},"kind")," field is either ",(0,l.kt)("inlineCode",{parentName:"li"},"GRAYSCALE")," or ",(0,l.kt)("inlineCode",{parentName:"li"},"GRAYSCALE_GCN"),", returns ",(0,l.kt)("inlineCode",{parentName:"li"},"0"))),(0,l.kt)("p",null,"I/O methods available in ",(0,l.kt)("inlineCode",{parentName:"p"},"Image"),"\uff1a"),(0,l.kt)("h3",{id:"imagekindfrom_file"},(0,l.kt)("inlineCode",{parentName:"h3"},"ImageKind.from_file")),(0,l.kt)("p",null,"Parameters: ",(0,l.kt)("inlineCode",{parentName:"p"},"path: PathType, disable_exif_orientation: bool = False")),(0,l.kt)("p",null,"Initialize a ",(0,l.kt)("inlineCode",{parentName:"p"},"Image")," object from an image file path. By default ",(0,l.kt)("inlineCode",{parentName:"p"},"disable_exif_orientation = False"),", which instructs vkit to parse the EXIF metadata from the image file and perform image rotation accordingly"),(0,l.kt)("h3",{id:"selfto_file"},(0,l.kt)("inlineCode",{parentName:"h3"},"self.to_file")),(0,l.kt)("p",null,"Parameters: ",(0,l.kt)("inlineCode",{parentName:"p"},"path: PathType, disable_to_rgb_image: bool = False")),(0,l.kt)("p",null,"Export the ",(0,l.kt)("inlineCode",{parentName:"p"},"Image")," to a file. By default ",(0,l.kt)("inlineCode",{parentName:"p"},"disable_to_rgb_image: bool = False"),", which saves the image using RGB image format"),(0,l.kt)("h3",{id:"imagekindfrom_pil_image"},(0,l.kt)("inlineCode",{parentName:"h3"},"ImageKind.from_pil_image")),(0,l.kt)("p",null,"Parameters: ",(0,l.kt)("inlineCode",{parentName:"p"},"pil_image: Image.Image")),(0,l.kt)("p",null,"Initialize a ",(0,l.kt)("inlineCode",{parentName:"p"},"Image")," object from an ",(0,l.kt)("inlineCode",{parentName:"p"},"PIL.Image")," object"),(0,l.kt)("h3",{id:"selfto_pil_image"},(0,l.kt)("inlineCode",{parentName:"h3"},"self.to_pil_image")),(0,l.kt)("p",null,"Parameters: None"),(0,l.kt)("p",null,"converts a ",(0,l.kt)("inlineCode",{parentName:"p"},"Image")," object to a ",(0,l.kt)("inlineCode",{parentName:"p"},"PIL.Image")," object"),(0,l.kt)("p",null,"Conversion methods available in ",(0,l.kt)("inlineCode",{parentName:"p"},"Image"),":"),(0,l.kt)("h3",{id:"selfclone"},(0,l.kt)("inlineCode",{parentName:"h3"},"self.clone")),(0,l.kt)("p",null,"Parameters: None"),(0,l.kt)("p",null,"Creates a copy of the ",(0,l.kt)("inlineCode",{parentName:"p"},"Image")),(0,l.kt)("h3",{id:"selfto_grayscale_image"},(0,l.kt)("inlineCode",{parentName:"h3"},"self.to_grayscale_image")),(0,l.kt)("p",null,"Parameters: None"),(0,l.kt)("p",null,"Converts the ",(0,l.kt)("inlineCode",{parentName:"p"},"Image")," into a ",(0,l.kt)("inlineCode",{parentName:"p"},"GRAYSCALE")," image. If the ",(0,l.kt)("inlineCode",{parentName:"p"},"self")," object is already of the ",(0,l.kt)("inlineCode",{parentName:"p"},"GRAYSCALE")," type, returns a ",(0,l.kt)("inlineCode",{parentName:"p"},"clone")," instance"),(0,l.kt)("h3",{id:"selfto_rgb_image"},(0,l.kt)("inlineCode",{parentName:"h3"},"self.to_rgb_image")),(0,l.kt)("p",null,"Parameters: None"),(0,l.kt)("p",null,"Converts the ",(0,l.kt)("inlineCode",{parentName:"p"},"Image")," into a ",(0,l.kt)("inlineCode",{parentName:"p"},"RGB")," image. If the ",(0,l.kt)("inlineCode",{parentName:"p"},"self")," object is already of the ",(0,l.kt)("inlineCode",{parentName:"p"},"RGB")," type, returns a ",(0,l.kt)("inlineCode",{parentName:"p"},"clone")," instance"),(0,l.kt)("h3",{id:"selfto_rgba_image"},(0,l.kt)("inlineCode",{parentName:"h3"},"self.to_rgba_image")),(0,l.kt)("p",null,"Parameters: None"),(0,l.kt)("p",null,"Converts the ",(0,l.kt)("inlineCode",{parentName:"p"},"Image")," into a ",(0,l.kt)("inlineCode",{parentName:"p"},"RGBA")," image. If the ",(0,l.kt)("inlineCode",{parentName:"p"},"self")," object is already of the ",(0,l.kt)("inlineCode",{parentName:"p"},"RGBA")," type, returns a ",(0,l.kt)("inlineCode",{parentName:"p"},"clone")," instance"),(0,l.kt)("h3",{id:"selfto_hsv_image"},(0,l.kt)("inlineCode",{parentName:"h3"},"self.to_hsv_image")),(0,l.kt)("p",null,"Parameters: None"),(0,l.kt)("p",null,"Converts the ",(0,l.kt)("inlineCode",{parentName:"p"},"Image")," into a ",(0,l.kt)("inlineCode",{parentName:"p"},"HSV")," image. If the ",(0,l.kt)("inlineCode",{parentName:"p"},"self")," object is already of the ",(0,l.kt)("inlineCode",{parentName:"p"},"HSV")," type, returns a ",(0,l.kt)("inlineCode",{parentName:"p"},"clone")," instance"),(0,l.kt)("h3",{id:"selfto_gcn_image"},(0,l.kt)("inlineCode",{parentName:"h3"},"self.to_gcn_image")),(0,l.kt)("p",null,"Parameters: ",(0,l.kt)("inlineCode",{parentName:"p"},"lamb=0, eps=1E-8, scale=1.0")),(0,l.kt)("p",null,"perform GCN on the image, please refer to ",(0,l.kt)("a",{parentName:"p",href:"https://cedar.buffalo.edu/~srihari/CSE676/12.2%20Computer%20Vision.pdf"},"this article")," for detail"),(0,l.kt)("h3",{id:"selfto_non_gcn_image"},(0,l.kt)("inlineCode",{parentName:"h3"},"self.to_non_gcn_image")),(0,l.kt)("p",null,"Parameters: None"),(0,l.kt)("p",null,"Converts the image to non GCN type, for example converting ",(0,l.kt)("inlineCode",{parentName:"p"},"RGB_GCN -> RGB")),(0,l.kt)("h3",{id:"selfto_resized_image"},(0,l.kt)("inlineCode",{parentName:"h3"},"self.to_resized_image")),(0,l.kt)("p",null,"Parameters: ",(0,l.kt)("inlineCode",{parentName:"p"},"self, height: int, width: int, cv_resize_interpolation: int = cv.INTER_CUBIC")),(0,l.kt)("p",null,"Scales the height and/or width of the image"))}k.isMDXComponent=!0}}]);